---
AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  Environment:
    Type: String

Outputs:
  BucketNotificationUpdaterLambda:
    Value: !GetAtt BucketNotificationUpdater.Arn

Resources:
  # Custom CFN resource for S3 notification update
  BucketNotificationUpdater:
    Type: AWS::Lambda::Function
    Properties:
      Description: S3 Object Custom Resource
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      FunctionName: !Sub "${Environment}-bucket-notification-updater-custom-cfn"
      Code:
        ZipFile: |
          // The cfn-response module is available only when you use the ZipFile property to write your source code.
          // It isn't available for source code that's stored in Amazon S3 buckets. For code in buckets, you must write
          // your own functions to send responses.
          const response = require('cfn-response');
          const AWS = require('aws-sdk');
          const s3 = new AWS.S3();

          exports.handler = function(event, context) {
              console.log("Running for event", JSON.stringify(event));
              const respond = (e) => response.send(event, context, e ? response.FAILED : response.SUCCESS, e ? e : {});

              const params = {
                  TopicConfigurations: event.ResourceProperties.NotificationConfiguration.TopicConfigurations || [],
                  QueueConfigurations: event.ResourceProperties.NotificationConfiguration.QueueConfigurations || [],
                  LambdaFunctionConfigurations: event.ResourceProperties.NotificationConfiguration.LambdaFunctionConfigurations || [],
                  Bucket: event.ResourceProperties.Bucket
              };

              const topicsIds = params.TopicConfigurations.map(tc => tc.Id);
              const queuesIds = params.QueueConfigurations.map(tc => tc.Id);
              const lambdaNotificationIds = params.LambdaFunctionConfigurations.map(tc => tc.Id);

              s3.getBucketNotificationConfiguration({Bucket: params.Bucket}).promise()
              .then(currentConfig => {
                  const updateConfig = {
                      NotificationConfiguration: event.RequestType === 'Delete' ? {
                          TopicConfigurations: currentConfig.TopicConfigurations.filter(tc => !topicsIds.includes(tc.Id)),
                          QueueConfigurations: currentConfig.QueueConfigurations.filter(tc => !queuesIds.includes(tc.Id)),
                          LambdaFunctionConfigurations: currentConfig.LambdaFunctionConfigurations.filter(tc => !lambdaNotificationIds.includes(tc.Id))
                      } : {
                          TopicConfigurations: currentConfig.TopicConfigurations.concat(params.TopicConfigurations),
                          QueueConfigurations: currentConfig.QueueConfigurations.concat(params.QueueConfigurations),
                          LambdaFunctionConfigurations: currentConfig.LambdaFunctionConfigurations.concat(params.LambdaFunctionConfigurations)
                      },
                      Bucket: params.Bucket
                  };

                  console.log(`Updating S3 bucket configuration of ${params.Bucket} to ${JSON.stringify(updateConfig)}`);

                  return s3.putBucketNotificationConfiguration(updateConfig).promise()
              })
              .then(data => {
                  console.log("Update succeeded");
                  respond();
              })
              .catch(e => {
                  console.log(`Failed to update bucket notification for bucket ${params.Bucket}`);
                  respond(e);
              });
          };
      Timeout: 30
      Runtime: nodejs12.x

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Environment}-bucket-notification-updater-custom-cfn"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
